import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7657539488:AAEa7y-BuaFB6sZTaTwIV2OnTjPSNIORIWQ"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_data = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–î–∞–ª—å—à–µ"
def next_button():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞–ª—å—à–µ", callback_data="next_word")]
    ])
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
def repeat_buttons():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="repeat_list")],
        [InlineKeyboardButton(text="‚ûï –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data="new_list")]
    ])
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: Message):
    user_id = message.chat.id
    users_data[user_id] = {"words": [], "index": 0}
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏–ª–∏ —Ñ—Ä–∞–∑ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add.")

# –ö–æ–º–∞–Ω–¥–∞ /add –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤
@dp.message(Command("add"))
async def add_words_handler(message: Message):
    user_id = message.chat.id
    new_words = message.text.replace("/add", "").strip().split("\n")
    
    if user_id not in users_data:
        users_data[user_id] = {"words": [], "index": 0}

    users_data[user_id]["words"].extend(new_words)
    users_data[user_id]["index"] = 0

    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_words)} —Å–ª–æ–≤/—Ñ—Ä–∞–∑. –ù–∞—á–∏–Ω–∞–µ–º –∏–∑—É—á–µ–Ω–∏–µ!")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ —Å—Ä–∞–∑—É
    await send_next_word(user_id)

# –ö–æ–º–∞–Ω–¥–∞ /list –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
@dp.message(Command("list"))
async def list_words_handler(message: Message):
    user_id = message.chat.id
    user_data = users_data.get(user_id, {"words": []})

    if not user_data["words"]:
        await message.answer("–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /add.")
    else:
        words_text = "\n".join([f"{i+1}. {word}" for i, word in enumerate(user_data["words"])])
        await message.answer(f"üìú *–í–∞—à–∏ —Å–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã:*\n\n{words_text}", parse_mode="Markdown")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞
async def send_next_word(user_id):
    user_data = users_data.get(user_id, {"words": [], "index": 0})

    if user_data["index"] < len(user_data["words"]):
        word = user_data["words"][user_data["index"]]
        users_data[user_id]["index"] += 1  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –û–ë–ù–û–í–õ–Ø–ï–ú INDEX!

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ + –∫–Ω–æ–ø–∫—É "–î–∞–ª—å—à–µ"
        await bot.send_message(chat_id=user_id, text=f"üìñ {word}", reply_markup=next_button())
    else:
        # –ï—Å–ª–∏ —Å–ª–æ–≤–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞
        await bot.send_message(chat_id=user_id, text="‚úÖ –¢—ã –∏–∑—É—á–∏–ª –≤—Å–µ —Å–ª–æ–≤–∞! –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=repeat_buttons())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª—å—à–µ"
@dp.callback_query(lambda call: call.data == "next_word")
async def next_word_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.message.chat.id
    await process_next_word(user_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ **–ª—é–±–æ–≥–æ** —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ "–î–∞–ª—å—à–µ"
@dp.message()
async def any_message_handler(message: Message):
    user_id = message.chat.id
    await process_next_word(user_id)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ "–î–∞–ª—å—à–µ" —Å —Ç–∞–π–º–µ—Ä–æ–º 5 –º–∏–Ω—É—Ç
async def process_next_word(user_id):
    user_data = users_data.get(user_id, {"words": [], "index": 0})

    if user_data["index"] < len(user_data["words"]):
        await bot.send_message(chat_id=user_id, text="‚è≥ –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–ª–æ–≤–æ–º...")

        # –û–∂–∏–¥–∞–µ–º 5 –º–∏–Ω—É—Ç
        await asyncio.sleep(30)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
        await send_next_word(user_id)
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ, —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ
        await bot.send_message(chat_id=user_id, text="‚úÖ –¢—ã –∏–∑—É—á–∏–ª –≤—Å–µ —Å–ª–æ–≤–∞! –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=repeat_buttons())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫"
@dp.callback_query(lambda call: call.data == "repeat_list")
async def repeat_list(callback_query: types.CallbackQuery):
    user_id = callback_query.message.chat.id
    users_data[user_id]["index"] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
    await bot.send_message(chat_id=user_id, text="üîÅ –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞!")
    await send_next_word(user_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞"
@dp.callback_query(lambda call: call.data == "new_list")
async def new_list(callback_query: types.CallbackQuery):
    user_id = callback_query.message.chat.id
    users_data[user_id] = {"words": [], "index": 0}
    await bot.send_message(chat_id=user_id, text="üìù –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())